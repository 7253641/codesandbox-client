import { IStorageService } from '../platform/storage/common/storage.js';
import { ICodeEditorService } from '../editor/browser/services/codeEditorService.js';
import { IFileDialogService } from '../platform/dialogs/common/dialogs.js';
import { ILabelService, LabelService } from '../platform/label/common/label.js';
import { IEditorGroupsService } from '../workbench/services/group/common/editorGroupsService.js';
import { IPartService } from '../workbench/services/part/common/partService.js';
import { IHistoryService } from '../workbench/services/history/common/history.js';
import { IFileService } from '../platform/files/common/files.js';
import { IEditorService } from '../workbench/services/editor/common/editorService.js';
import { IWindowsService, IWindowService, } from '../platform/windows/common/windows.js';
import { ITextFileService } from '../workbench/services/textfile/common/textfiles.js';
import { IExtensionService } from '../workbench/services/extensions/common/extensions.js';
import { IExtensionGalleryService, IExtensionManagementService, IExtensionEnablementService, } from '../platform/extensionManagement/common/extensionManagement.js';
import { IUntitledEditorService, UntitledEditorService, } from '../workbench/services/untitled/common/untitledEditorService.js';
import { IHashService } from '../workbench/services/hash/common/hashService.js';
import { IBackupFileService } from '../workbench/services/backup/common/backup.js';
import { IDecorationsService } from '../workbench/services/decorations/browser/decorations.js';
import { IPreferencesService } from '../workbench/services/preferences/common/preferences.js';
import { IJSONEditingService } from '../workbench/services/configuration/common/jsonEditing.js';
import { ITextModelService } from '../editor/common/services/resolverService.js';
import { IWorkspacesService } from '../platform/workspaces/common/workspaces.js';
import { ISearchService, ISearchHistoryService, } from '../platform/search/common/search.js';
import { IViewletService } from '../workbench/services/viewlet/browser/viewlet.js';
import { IBroadcastService } from '../platform/broadcast/electron-browser/broadcastService.js';
import { IBreadcrumbsService, BreadcrumbsService, } from '../workbench/browser/parts/editor/breadcrumbs.js';
import { IProgressService2 } from '../platform/progress/common/progress.js';
import { IActivityService } from '../workbench/services/activity/common/activity.js';
import { IOutputService } from '../workbench/parts/output/common/output.js';
import { IPanelService } from '../workbench/services/panel/common/panelService.js';
import { IQuickInputService } from '../platform/quickinput/common/quickInput.js';
import { IHeapService, HeapService, } from '../workbench/api/electron-browser/mainThreadHeapService.js';
import { CodeSandboxWindowsService } from './windowsService.js';
import { EditorService } from '../workbench/services/editor/browser/editorService.js';
import { ICodeSandboxEditorConnectorService } from './services/codesandbox/common/codesandboxEditorConnector.js';
import { IRequestService } from '../platform/request/node/request.js';
import { CodeSandboxRequestService } from './requestService.js';
import { IPreferencesSearchService } from '../workbench/parts/preferences/common/preferences.js';
import { PreferencesSearchService } from '../workbench/parts/preferences/electron-browser/preferencesSearch.js';
import { IClipboardService } from '../platform/clipboard/common/clipboardService.js';
import { CodeSandboxClipboardService } from './clipboardService.js';
import { IKeybindingEditingService, KeybindingsEditingService, } from '../workbench/services/keybinding/common/keybindingEditing.js';
import { ILifecycleService } from '../platform/lifecycle/common/lifecycle.js';
import { CodeSandboxLifecycleService } from './lifecycleService.js';
import { Registry } from '../platform/registry/common/platform.js';
import { Extensions as WorkbenchExtensions, } from '../workbench/common/contributions.js';
import { IStatusbarService } from '../platform/statusbar/common/statusbar.js';
import { getServices } from '../platform/instantiation/common/extensions.js';
import { SearchHistoryService } from '../workbench/services/search/node/searchHistoryService.js';
import { HistoryService } from '../workbench/services/history/electron-browser/history.js';
import { Extensions as ActionBarExtensions, } from '../workbench/browser/actions.js';
import { SaveParticipant } from './services/codesandbox/saveParticipant.js';
import { CodeSandboxActivityService } from './activityService.js';
import { CodeSandboxOutputService } from './outputService.js';
import { CodeSandboxPanelService } from './panelService.js';
import { CodeSandboxBroadcastService } from './broadcastService.js';
import { CodeSandboxWorkspacesService } from './workspacesService.js';
import { JSONEditingService } from '../workbench/services/configuration/node/jsonEditingService.js';
import { FileDecorationsService } from '../workbench/services/decorations/browser/decorationsService.js';
import { SyncDescriptor } from '../platform/instantiation/common/descriptors.js';
import { CodeSandboxFileService } from './fileService.js';
import { CodeSandboxExtensionGalleryService } from './extensionGalleryService.js';
import { CodeSandboxFileDialogService } from './fileDialogService.js';
import { CodeSandboxExtensionManagementService } from './extensionManagementService.js';
import { ExtensionEnablementService } from '../platform/extensionManagement/common/extensionEnablementService.js';
import { WindowService } from '../platform/windows/electron-browser/windowService.js';
import { CodeSandboxBackupService } from './backupFileService.js';
import { CodeSandboxHashService } from './hashService.js';
import { EditorPart } from '../workbench/browser/parts/editor/editorPart.js';
import { ViewletService } from '../workbench/services/viewlet/browser/viewletService.js';
import { CodeSandboxWorkbench } from './workbench.js';
import { TextFileService } from '../workbench/services/textfile/electron-browser/textFileService.js';
import { TextModelResolverService } from '../workbench/services/textmodelResolver/common/textModelResolverService.js';
import { CodeSandboxSearchService } from './searchService.js';
import { CodeEditorService } from '../workbench/services/codeEditor/browser/codeEditorService.js';
import { CodeSandboxEditorConnectorService } from './services/codesandbox/browser/codesandboxEditorConnectorService.js';
import { PreferencesService } from '../workbench/services/preferences/browser/preferencesService.js';
import { ProgressService2 } from '../workbench/services/progress/browser/progressService2.js';
import { QuickInputService } from '../workbench/browser/parts/quickinput/quickInput.js';
import { QuickOpenController } from '../workbench/browser/parts/quickopen/quickOpenController.js';
import { IQuickOpenService } from '../platform/quickOpen/common/quickOpen.js';
import { CodeSandboxEnvironmentService } from './environmentService.js';
import { IEnvironmentService } from '../platform/environment/common/environment.js';
import { CodeSandboxKeybindingService } from './keybindingService.js';
import { IKeybindingService } from '../platform/keybinding/common/keybinding.js';
import { ICodeSandboxService } from './services/codesandbox/common/codesandbox.js';
import { CodeSandboxService } from './services/codesandbox/browser/codesandboxService.js';
import { SidebarPart } from '../workbench/browser/parts/sidebar/sidebarPart.js';
import { ActivitybarPart } from '../workbench/browser/parts/activitybar/activitybarPart.js';
import { INotificationService } from '../platform/notification/common/notification.js';
import { CodeSandboxNotificationService } from './notificationService.js';
import { CodeSandboxStorageService } from './storageService.js';
import { StatusbarPart } from '../workbench/browser/parts/statusbar/statusbarPart.js';
import { CodeSandboxConfigurationUIService } from './services/codesandbox/configurationUIService.js';
import { ExtensionService } from '../workbench/services/extensions/electron-browser/extensionService.js';
import { ICrashReporterService } from '../workbench/services/crashReporter/electron-browser/crashReporterService.js';
import { CodeSandboxCrashReporterService } from './crashReporterService.js';
import { IURLService } from '../platform/url/common/url.js';
import { URLService } from '../platform/url/common/urlService.js';
import { IExtensionUrlHandler, ExtensionUrlHandler } from '../workbench/services/extensions/electron-browser/inactiveExtensionUrlHandler.js';
import { IWorkspaceEditingService } from '../workbench/services/workspace/common/workspaceEditing.js';
import { WorkspaceEditingService } from '../workbench/services/workspace/node/workspaceEditingService.js';
import { ICommandService } from '../platform/commands/common/commands.js';
import { CommandService } from '../workbench/services/commands/common/commandService.js';
import { ITextMateService } from '../workbench/services/textMate/electron-browser/textMateService.js';
import { TextMateService } from '../workbench/services/textMate/electron-browser/TMSyntax.js';
import { WorkbenchThemeService } from '../workbench/services/themes/electron-browser/workbenchThemeService.js';
import { IModeService } from '../editor/common/services/modeService.js';
import { WorkbenchModeServiceImpl } from '../workbench/services/mode/common/workbenchModeService.js';
import { IWorkbenchThemeService } from '../workbench/services/themes/common/workbenchThemeService.js';
import { IBulkEditService } from '../editor/browser/services/bulkEditService.js';
import { BulkEditService } from '../workbench/services/bulkEdit/electron-browser/bulkEditService.js';
export function loadCodesandboxServices(serviceCollection, instantiationService, overrides) {
    // The or case in this serviceCollection should never happen, we still put it in here to trick
    // the treeshaker to include it.
    serviceCollection.set(ICodeSandboxService, overrides.codesandboxService(instantiationService) ||
        instantiationService.createInstance(CodeSandboxService));
    serviceCollection.set(IEnvironmentService, instantiationService.createInstance(CodeSandboxEnvironmentService));
    serviceCollection.set(ICrashReporterService, instantiationService.createInstance(CodeSandboxCrashReporterService));
    var notificationService = instantiationService.createInstance(CodeSandboxNotificationService);
    serviceCollection.set(INotificationService, notificationService);
    var existingKeybindingService = serviceCollection.get(IKeybindingService);
    if (existingKeybindingService) {
        existingKeybindingService.dispose();
    }
    var keybindingService = instantiationService.createInstance(CodeSandboxKeybindingService, window);
    serviceCollection.set(IKeybindingService, keybindingService);
    serviceCollection.set(ICommandService, new SyncDescriptor(CommandService));
    serviceCollection.set(IRequestService, new SyncDescriptor(CodeSandboxRequestService));
    serviceCollection.set(IClipboardService, new SyncDescriptor(CodeSandboxClipboardService));
    serviceCollection.set(ILabelService, new SyncDescriptor(LabelService));
    serviceCollection.set(IActivityService, new SyncDescriptor(CodeSandboxActivityService));
    serviceCollection.set(IOutputService, new SyncDescriptor(CodeSandboxOutputService));
    serviceCollection.set(IPanelService, new SyncDescriptor(CodeSandboxPanelService));
    serviceCollection.set(IBreadcrumbsService, new SyncDescriptor(BreadcrumbsService));
    serviceCollection.set(IBroadcastService, new SyncDescriptor(CodeSandboxBroadcastService, [1]));
    serviceCollection.set(IWorkspacesService, new SyncDescriptor(CodeSandboxWorkspacesService));
    serviceCollection.set(IJSONEditingService, new SyncDescriptor(JSONEditingService));
    serviceCollection.set(IDecorationsService, new SyncDescriptor(FileDecorationsService));
    serviceCollection.set(IBackupFileService, new SyncDescriptor(CodeSandboxBackupService));
    var lifecycleService = instantiationService.createInstance(CodeSandboxLifecycleService);
    serviceCollection.set(ILifecycleService, lifecycleService);
    var fileService = instantiationService.createInstance(CodeSandboxFileService);
    serviceCollection.set(IFileService, fileService);
    serviceCollection.set(IWindowsService, new SyncDescriptor(CodeSandboxWindowsService));
    serviceCollection.set(IWindowService, new SyncDescriptor(WindowService, [1, {}]));
    serviceCollection.set(IExtensionGalleryService, new SyncDescriptor(CodeSandboxExtensionGalleryService));
    serviceCollection.set(IFileDialogService, new SyncDescriptor(CodeSandboxFileDialogService));
    serviceCollection.set(IExtensionManagementService, new SyncDescriptor(CodeSandboxExtensionManagementService));
    serviceCollection.set(IExtensionEnablementService, new SyncDescriptor(ExtensionEnablementService));
    var extensionService = instantiationService.createInstance(ExtensionService);
    serviceCollection.set(IExtensionService, extensionService);
    serviceCollection.set(IHashService, new SyncDescriptor(CodeSandboxHashService));
    serviceCollection.set(IEditorGroupsService, new SyncDescriptor(EditorPart, ['codesandbox-editor', false]));
    serviceCollection.set(IStorageService, new CodeSandboxStorageService());
    var themeService = instantiationService.createInstance(WorkbenchThemeService, document.body);
    serviceCollection.set(IWorkbenchThemeService, themeService);
    themeService.acquireFileService(fileService);
    serviceCollection.set(IPartService, new SyncDescriptor(CodeSandboxWorkbench));
    window.sidebarPart = instantiationService.createInstance(SidebarPart, 'codesandbox-sidebar');
    serviceCollection.set(IViewletService, new SyncDescriptor(ViewletService, [window.sidebarPart]));
    serviceCollection.set(IStatusbarService, new SyncDescriptor(StatusbarPart, ['codesandbox-statusbar']));
    window.activitybarPart = instantiationService.createInstance(ActivitybarPart, 'codesandbox-activitybar');
    serviceCollection.set(IUntitledEditorService, new SyncDescriptor(UntitledEditorService));
    serviceCollection.set(IEditorService, new SyncDescriptor(EditorService));
    serviceCollection.set(ISearchService, new SyncDescriptor(CodeSandboxSearchService));
    serviceCollection.set(IHistoryService, new SyncDescriptor(HistoryService));
    serviceCollection.set(ITextFileService, new SyncDescriptor(TextFileService));
    serviceCollection.set(ITextModelService, new SyncDescriptor(TextModelResolverService));
    serviceCollection.set(ICodeEditorService, instantiationService.createInstance(CodeEditorService));
    serviceCollection.set(ICodeSandboxEditorConnectorService, instantiationService.createInstance(CodeSandboxEditorConnectorService));
    serviceCollection.set(IPreferencesSearchService, new SyncDescriptor(PreferencesSearchService));
    serviceCollection.set(IPreferencesService, new SyncDescriptor(PreferencesService));
    serviceCollection.set(IKeybindingEditingService, new SyncDescriptor(KeybindingsEditingService));
    serviceCollection.set(IProgressService2, new SyncDescriptor(ProgressService2));
    serviceCollection.set(IQuickOpenService, instantiationService.createInstance(QuickOpenController));
    serviceCollection.set(IQuickInputService, new SyncDescriptor(QuickInputService));
    serviceCollection.set(IURLService, new SyncDescriptor(URLService));
    serviceCollection.set(IExtensionUrlHandler, new SyncDescriptor(ExtensionUrlHandler));
    serviceCollection.set(IHeapService, new SyncDescriptor(HeapService));
    serviceCollection.set(IWorkspaceEditingService, new SyncDescriptor(WorkspaceEditingService));
    serviceCollection.set(ITextMateService, new SyncDescriptor(TextMateService));
    serviceCollection.set(IModeService, new SyncDescriptor(WorkbenchModeServiceImpl));
    serviceCollection.set(ISearchHistoryService, new SyncDescriptor(SearchHistoryService));
    serviceCollection.set(IBulkEditService, new SyncDescriptor(BulkEditService));
    serviceCollection.set(CodeSandboxConfigurationUIService, overrides.codesandboxConfigurationUIService(instantiationService));
    Registry.as(WorkbenchExtensions.Workbench).start(instantiationService, lifecycleService);
    Registry.as(ActionBarExtensions.Actionbar).setInstantiationService(instantiationService);
    instantiationService.createInstance(SaveParticipant);
    // Contributed services
    var contributedServices = getServices();
    for (var _i = 0, contributedServices_1 = contributedServices; _i < contributedServices_1.length; _i++) {
        var contributedService = contributedServices_1[_i];
        serviceCollection.set(contributedService.id, contributedService.descriptor);
    }
}
